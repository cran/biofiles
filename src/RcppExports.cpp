// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gbFeature
SEXP gbFeature(std::vector<std::string> feature, std::string accession, int id);
RcppExport SEXP _biofiles_gbFeature(SEXP featureSEXP, SEXP accessionSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< std::string >::type accession(accessionSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(gbFeature(feature, accession, id));
    return rcpp_result_gen;
END_RCPP
}
// gbLocation
SEXP gbLocation(std::string gb_base_span, std::string accession);
RcppExport SEXP _biofiles_gbLocation(SEXP gb_base_spanSEXP, SEXP accessionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type gb_base_span(gb_base_spanSEXP);
    Rcpp::traits::input_parameter< std::string >::type accession(accessionSEXP);
    rcpp_result_gen = Rcpp::wrap(gbLocation(gb_base_span, accession));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_biofiles_gbFeature", (DL_FUNC) &_biofiles_gbFeature, 3},
    {"_biofiles_gbLocation", (DL_FUNC) &_biofiles_gbLocation, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_biofiles(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
